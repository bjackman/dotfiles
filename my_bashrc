#!/bin/bash

#don't need to do all this shit if we're not interactive
tty -s || return

#SSH_ASKPASS holds `which gnome-ssh-askpass` by default. git calls this
#graphical program even when running on a terminal (a bug). fix like this:
unset SSH_ASKPASS

export EDITOR=`which vim`
export GRAPHICAL_EDITOR="emacsclient"

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjvf $1    ;;
      *.tar.gz)    tar xzvf $1    ;;
      *.tar.xz)    tar xJvf $1    ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

source ~/dotfiles/simple_git_prompt.sh

export PATH=${PATH}:~/dotfiles/bin
export PATH=${PATH}:~/.local/bin
export PATH=${PATH}:.

export LD_LIBRARY_PATH=~/.local/lib/:$LD_LIBRARY_PATH

#tricks to quickly clone hosted git repos
github-clone() {
  generic-git-clone "github.com" $*
}
bitbucket-clone() {
  generic-git-clone "bitbucket.org" $*
}
generic-git-clone() {
  host_domain=$1
  if [[ $# -lt 3 ]]; then
    username=bjackman
    repo_name=$2
  else
    username=$2
    repo_name=$3
  fi
  git clone git@${host_domain}:${username}/${repo_name}.git
}

#distro non-specific update
if [[ -f /etc/lsb-release ]]; then
  source /etc/lsb-release
  case $DISTRIB_ID in
    "Ubuntu")
      alias update="sudo apt update && sudo apt upgrade"
      alias install="sudo apt install -y "
      alias uninstall="sudo apt remove -y "
      ;;
    "Fedora")
      alias update="sudo yum update"
      alias install="sudo yum install "
      ;;
  esac
else
  if [[ -f /etc/lsb-release-crunchbang ]]; then
    alias update="sudo apt-get update && sudo apt-get upgrade"
    alias install="sudo apt-get install -y "
  fi
fi


newdir() {
  mkdir -p $1
  cd $1
}

newpdir() {
  mkdir $1
  pushd $1
}

newtdir() {
  dir=$(mktemp -d)
  cd $dir
}

newptdir() {
  dir=$(mktemp -d)
  pushd $dir
}

hex2dec() {
  if [ -z `echo $* | grep 0x` ]; then
    printf "%d\n" 0x$*
  else
    printf "%d\n" $*
  fi
}

dec2hex() {
  printf "0x%x\n" $*
}

filegrep() {
  find . -name "$1" -exec grep -nH "$2" {} \;
}

# Mount a disk by label without root
mnt() {
  label=$1
  shift
  udisks --mount /dev/disk/by-label/$label $*
}
umnt() {
  label=$1
  shift
  udisks --unmount /dev/disk/by-label/$label $*
}

alias proper_hexdump="hexdump -v -e '\"0x%08_ax \" 1/4 \"0x%08x\" \"\n\"'"
memdiff() {
  vimdiff <(proper_hexdump $1) <(proper_hexdump $2)
}

alias remove_trailing_whitespace="sed --in-place 's/[[:space:]]\+$//' "

#################
# Git stuff
##################

alias git_add_no_whitespace="git diff -w --no-color | git apply --cached --ignore-whitespace"
git_undo_whitespace() {
  git diff -w --no-color | git apply --cached --ignore-whitespace && \
  git commit -m "tmp"                                             && \
  git reset --hard HEAD                                           && \
  git reset HEAD^
}

alias gap="git add -p "

alias gcam="git commit -am "
alias gcamend="git commit --amend"
alias gcm="git commit -m "
alias gsign="git commit --amend --signoff --no-edit "

alias gcf="git clean -f "
alias gc="git checkout "
alias gcb="git checkout -b"
alias gcp="git checkout -p "
alias grebase='git rebase -i $(git rev-parse --abbrev-ref @{upstream})'
alias grhard="git reset --hard "
# Check out a commit with a floating head
gfloat() {
    git checkout $(git rev-parse ${1-HEAD})
}

alias hrc="hg resolve --mark && hg rebase --continue"
alias hhc="hg resolve --mark && hg histedit --continue"
alias hec="hg resolve --mark && hg evolve --continue"
alias heu="hg evolve --update"
alias hrm="hg resolve --mark ."
alias hua="hg uploadall --will-update-only"
alias hsa="hg sync --all"
alias hsu="hg sync --all && hg uploadall --will-update-only"
alias hgskip="hg revert -r.^ . && hg resolve --mark . && hg rebase --continue"

# Log with graph and shit but without being hella slow on kernel repos
gll() {
    local branch=${1-HEAD}
    local base=$branch
    while [ $(git rev-list --first-parent --count "$base".."$branch") -le "${GLL_NCOMMITS-1}" ]; do
        base=$(git describe --first-parent --match "v*" --abbrev=0 $base^)
    done

    git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset %C(blue)<%cn>%Creset' $base..$branch
}

####################

find_define() {
  filegrep "*.h" "#define\s*$1"
}
find_type() {
  filegrep "*.h" "typedef.*$1"
}

if [ $(uname) != "Darwin" ]; then
    alias open="xdg-open "
fi

alias fnd="find . -name "
alias gdb="gdb -q"
alias bashrc="source ~/.bashrc"
alias edit_bashrc='$GRAPHICAL_EDITOR ~/dotfiles/my_bashrc'
alias trash="trash-put"
alias webserver="python3 -m http.server 8080"
alias disassemble='${CROSS_COMPILE}objdump -d '

alias ls="ls --color=auto "

em() {
  if pgrep emacs > /dev/null; then
    emacsclient --no-wait $*
  else
    emacs $* &
  fi
}

_up() {
  local target
  target=.
  for i in `seq $1`; do
    target=$target/..
  done
  echo $target
}
up() {
  cd $(_up $*)
}
upp() {
  pushd $(_up $*)
}

bakup() {
  local orig="${1%/}" # '%/' removes trailing slash (only one though)
  local bakup="$orig".bak

  if [ -e "$bakup" ]; then
    echo $bakup already exists
    return 1
  fi

  mv "$orig" "$bakup"
}

rekstore() {
  local bakup="${1%/}" # '%/' removes trailing slash (only one though)
  local orig="${bakup%.bak}"

  if [ -e "$orig" ]; then
    echo $orig already exists
    return 1
  fi

  echo mv "$bakup" "$orig"
  mv "$bakup" "$orig"
}

_cmdiff() {
  diff="$1"
  shift
  cmd="$1"
  $diff <($cmd $2) <($cmd $3)
}
cmdiff() {
  _cmdiff diff "$@"
}
vcmdiff() {
  _cmdiff vimdiff "$@"
}

GERT=1000000000
HISTFILESIZE=$GERT
HISTSIZE=$GERT
shopt -s histappend
HISTCONTROL=ignoredups
HISTIGNORE="ls:bg:fg:history"
shopt -s cmdhist #squash multiline commands into one line (obviously..)

# GREP_OPTIONS is deprecated, y GNU mama tambien
alias grep="grep --color=auto "

if [[ -f ~/.local_bashrc ]]; then
  source ~/.local_bashrc
fi

if which fortune >/dev/null 2>/dev/null && which cowsay >/dev/null 2>/dev/null; then
    fortune | cowsay
else
    cat <<EOF
 ___________________________
< WHAT IS THIS I DON'T EVEN >
 ---------------------------
        \   ^__^
         \  (@@)\_______
            (__)\       )\/\\
                ||----w |
                ||     ||
EOF
fi
